import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';
import { AgentSpecializationEnum } from 'src/common/enums/agents.enum';

export type AgentDocument = Agent & Document;

@Schema({ timestamps: true })
export class Agent {
  @Prop({ type: Types.ObjectId, ref: 'User' })
  userId: Types.ObjectId;

  @Prop({ unique: true })
  license?: string; // Generated by admin

  @Prop()
  bio?: string;

  @Prop()
  phone?: string;

  @Prop({ type: [String] })
  documents?: string[]; // ID card, passport images

  @Prop({ required: true, min: 0, max: 100 })
  commissionRate: number;

  @Prop({ default: 0 })
  balance: number;

  @Prop({ type: Number, min: 0, max: 5, default: 0 }) // 0-5 scale
  ratings?: number;

  @Prop({ enum: ['Top Rated', 'Pro', 'Verified', null], default: null })
  badge?: string;

  @Prop({ enum: ['pending', 'approved', 'rejected'], default: 'pending' })
  status: string;

  @Prop({
    type: {
      totalProperties: { type: Number, default: 0 },
      projects: { type: Number, default: 0 },
      land: { type: Number, default: 0 },
    },
    default: {},
  })
  sales?: {
    totalProperties?: number;
    projects?: number;
    land?: number;
  };

  @Prop({ type: Number, default: 0 })
  revenue?: number;

  @Prop({
    type: [String],
    enum: Object.values(AgentSpecializationEnum),
    default: [],
  })
  specializations?: string[];

  @Prop({
    type: {
      minPrice: { type: Number, default: 120000 }, // $120k
      maxPrice: { type: Number, default: 2800000 }, // $2.8M
    },
    default: {},
  })
  priceRange?: {
    minPrice?: number;
    maxPrice?: number;
  };

  @Prop({ type: [String], enum: ['buying', 'selling'], default: [] })
  category?: string[];

  @Prop({ enum: ['self', 'team', 'agency'], default: 'self' })
  employees?: string;

  @Prop({ type: Number, default: 0 })
  clients?: number;

  @Prop({ type: [String], default: [] })
  languages?: string[];
}

export const AgentSchema = SchemaFactory.createForClass(Agent);